A Python tool that collects dork search results from DuckDuckGo using the HTML interface — no API required.
It reads dorks from a file, performs automated searches, extracts titles, URLs and snippets, and saves all results to a CSV file. Random delays are used between requests to reduce the chance of blocking.

Legal notice: Use this tool only on targets you have explicit permission to test or for legitimate research/educational purposes. Any misuse is the user’s responsibility.

Requirements & Run Instructions
Requirements

Python 3.8+

Python packages:

requests

beautifulsoup4

pandas

Optional — create a requirements.txt:

requests
beautifulsoup4
pandas

Installation
# (optional) create & activate a virtual environment
python3 -m venv .venv
# macOS / Linux
source .venv/bin/activate
# Windows (PowerShell)
.venv\Scripts\Activate.ps1

# install dependencies
pip install -r requirements.txt
# or
pip install requests beautifulsoup4 pandas

Files (place in the same folder)

dork.py — the script (or your script filename)

google.txt — example wordlist (one dork per line)

results.csv — created or appended after running

Run command (example)
python dork.py --wordlist google.txt --site example.com

Example explained

--wordlist google.txt — path to the file that contains dorks (one per line).

--site example.com — optional filter to restrict searches to a specific domain (if supported by the script).

If your script uses a different filename (e.g. dorker_no_api.py), replace dork.py with the correct name.

Helpful tips

Start small for tests: put 3–5 dorks in your wordlist and run a short batch.

Adjust delay settings inside the script (MIN_DELAY, MAX_DELAY) to be more conservative if you see rate-limiting.

Redirect logs to a file for debugging:

python dork.py --wordlist google.txt --site example.com 2>&1 | tee run.log
